<?php

namespace Teo\ProductBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{
    protected $use_available = false;

    public function setUseAvailable()
    {
        $this->use_available = true;
    }

    public function reorder($ids)
    {
        if (count($ids) == 0) {
            return;
        }

        $counter = 0;
        foreach ($ids as $id) {
            $this->find($id)->setPosition($counter);
            $counter++;
        }

        $this->_em->flush();
    }

    public function searchProduct($search)
    {
        $q = $this->createQueryBuilder('p');

        $q
            ->select('p', 't')
            ->leftJoin('p.translations', 't')
            ->where('t.title LIKE :search')
            ->setParameter('search', '%' . $search . '%');

        if ($this->use_available) {
            $q
                ->andWhere('p.available = :available')
                ->setParameter('available', true)
                ;
        }

        return $q->getQuery()->getResult();
    }

    public function getNextId($previous)
    {
        $q = $this->createQueryBuilder('p');

        $q
            ->select('p.id')
            ->where('p.id > :previous')
            ->orderBy('p.id', 'ASC')
            ->setMaxResults(1)
            ;

        $q->setParameter('previous', $previous);

        $result = $q->getQuery()->getScalarResult();
        if (count($result)) {
            return $result[0]['id'];
        }

        return false;
    }
}
